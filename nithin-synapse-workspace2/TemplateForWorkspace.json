{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"workspaceName": {
			"type": "string",
			"metadata": "Workspace name",
			"defaultValue": "nithin-synapse-workspace2"
		},
		"AzureDataLakeStorage1_accountKey": {
			"type": "secureString",
			"metadata": "Secure string for 'accountKey' of 'AzureDataLakeStorage1'"
		},
		"ls_adlsgen2_poc_accountKey": {
			"type": "secureString",
			"metadata": "Secure string for 'accountKey' of 'ls_adlsgen2_poc'"
		},
		"ls_synapsesql_poc_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'ls_synapsesql_poc'",
			"defaultValue": "Integrated Security=False;Encrypt=True;Connection Timeout=30;Data Source=@{linkedService().serverName};Initial Catalog=@{linkedService().databaseName};User ID=@{linkedService().userName};Password=@{linkedService().password}"
		},
		"nithin-synapse-workspace1-WorkspaceDefaultSqlServer_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'nithin-synapse-workspace1-WorkspaceDefaultSqlServer'",
			"defaultValue": "Integrated Security=False;Encrypt=True;Connection Timeout=30;Data Source=tcp:nithin-synapse-workspace1.sql.azuresynapse.net,1433;Initial Catalog=@{linkedService().DBName}"
		},
		"nithin-synapse-workspace2-WorkspaceDefaultSqlServer_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'nithin-synapse-workspace2-WorkspaceDefaultSqlServer'",
			"defaultValue": "Integrated Security=False;Encrypt=True;Connection Timeout=30;Data Source=tcp:nithin-synapse-workspace2.sql.azuresynapse.net,1433;Initial Catalog=@{linkedService().DBName}"
		},
		"AzureDataLakeStorage1_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://nithindatalakestorage2.dfs.core.windows.net/"
		},
		"ls_adlsgen2_poc_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://nithindatalakestorage2.dfs.core.windows.net/"
		},
		"ls_restapi_ba_poc_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "@{linkedService().BaseURL}"
		},
		"nithin-synapse-workspace2-WorkspaceDefaultStorage_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://nithindatalakestorage2.dfs.core.windows.net"
		},
		"Trigger 1_properties_AutoPuaseDedicatedSQLPool_parameters_ResourceGroup": {
			"type": "string",
			"defaultValue": "Nithin-Synapse"
		},
		"Trigger 1_properties_AutoPuaseDedicatedSQLPool_parameters_SubscriptionID": {
			"type": "string",
			"defaultValue": "da16ec95-05d4-4b58-9f85-0e95af4fef4c"
		},
		"Trigger 1_properties_AutoPuaseDedicatedSQLPool_parameters_WorkspaceName": {
			"type": "string",
			"defaultValue": "nithin-synapse-workspace2"
		},
		"Trigger 2_properties_AutoPuaseDedicatedSQLPool_parameters_ResourceGroup": {
			"type": "string",
			"defaultValue": "Nithin-Synapse"
		},
		"Trigger 2_properties_AutoPuaseDedicatedSQLPool_parameters_SubscriptionID": {
			"type": "string",
			"defaultValue": "da16ec95-05d4-4b58-9f85-0e95af4fef4c"
		},
		"Trigger 2_properties_AutoPuaseDedicatedSQLPool_parameters_WorkspaceName": {
			"type": "string",
			"defaultValue": "nithin-synapse-workspace2"
		}
	},
	"variables": {
		"workspaceId": "[concat('Microsoft.Synapse/workspaces/', parameters('workspaceName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('workspaceName'), '/AutoPuaseDedicatedSQLPool')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "PoolStatusCheck",
						"description": "{}",
						"type": "WebActivity",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": {
								"value": "https://management.azure.com/subscriptions/@{pipeline().parameters.SubscriptionID}/resourceGroups/@{pipeline().parameters.ResourceGroup}/providers/Microsoft.Synapse/workspaces/@{pipeline().parameters.WorkspaceName}/sqlPools?api-version=2021-06-01",
								"type": "Expression"
							},
							"connectVia": {
								"referenceName": "AutoResolveIntegrationRuntime",
								"type": "IntegrationRuntimeReference"
							},
							"method": "GET",
							"headers": {},
							"authentication": {
								"type": "MSI",
								"resource": "https://management.azure.com/"
							}
						}
					},
					{
						"name": "ForEach1",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "PoolStatusCheck",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('PoolStatusCheck').output.value",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "If Condition1",
									"type": "IfCondition",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"expression": {
											"value": "@equals(item().properties.status,'Online')",
											"type": "Expression"
										},
										"ifTrueActivities": [
											{
												"name": "PauseSQLPool",
												"type": "WebActivity",
												"dependsOn": [],
												"policy": {
													"timeout": "0.12:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"url": {
														"value": "https://management.azure.com/subscriptions/@{pipeline().parameters.SubscriptionID}/resourceGroups/@{pipeline().parameters.ResourceGroup}/providers/Microsoft.Synapse/workspaces/@{pipeline().parameters.WorkspaceName}/sqlPools/@{item().name}/pause?api-version=2021-06-01",
														"type": "Expression"
													},
													"connectVia": {
														"referenceName": "AutoResolveIntegrationRuntime",
														"type": "IntegrationRuntimeReference"
													},
													"method": "POST",
													"headers": {},
													"body": {},
													"authentication": {
														"type": "MSI",
														"resource": "https://management.azure.com/"
													}
												}
											}
										]
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"ResourceGroup": {
						"type": "string",
						"defaultValue": "Nithin-Synapse"
					},
					"SubscriptionID": {
						"type": "string",
						"defaultValue": "da16ec95-05d4-4b58-9f85-0e95af4fef4c"
					},
					"WorkspaceName": {
						"type": "string",
						"defaultValue": "nithin-synapse-workspace2"
					}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/CopyfromSalesForcetoRaw_Final')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "Copy Json using RestAPI",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "RestSource",
								"httpRequestTimeout": "00:01:40",
								"requestInterval": "00.00:00:00.010",
								"requestMethod": "GET",
								"paginationRules": {
									"supportRFC5988": "true"
								}
							},
							"sink": {
								"type": "JsonSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "JsonWriteSettings"
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "ds_ba_poc_restapi_json_copy1",
								"type": "DatasetReference",
								"parameters": {
									"dsparamBaseURL": "https://jsonplaceholder.typicode.com/users"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "ds_ba_poc_adlsgen2_json",
								"type": "DatasetReference",
								"parameters": {
									"dsparamFileName": "user.json",
									"dsparamContainerName": "poc",
									"dsparamDirectoryName": "salesforce/jsonfiles"
								}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/ds_ba_poc_adlsgen2_json')]",
				"[concat(variables('workspaceId'), '/datasets/ds_ba_poc_restapi_json_copy1')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/MergeSalesforceDatafromRawtoGold_Final')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "LookupforServerDetails",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "JsonSource",
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "JsonReadSettings"
								}
							},
							"dataset": {
								"referenceName": "ds_ba_poc_adlsgen2_json",
								"type": "DatasetReference",
								"parameters": {
									"dsparamFileName": "SynSQLServerDetails.json",
									"dsparamContainerName": "poc",
									"dsparamDirectoryName": "configfiles"
								}
							}
						}
					},
					{
						"name": "Lookup SPNames",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "LookupforServerDetails",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"dataset": {
								"referenceName": "ds_ba_poc_adls_delimit",
								"type": "DatasetReference",
								"parameters": {
									"dsparamFileName": "sp_config_salesforce.csv",
									"dsparamContainerName": "poc",
									"dsparamDirectoryName": "configfiles",
									"dsparamColumDelimitter": "|"
								}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "ForEach SP",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Lookup SPNames",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Lookup SPNames').output.value",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "SPMergeRawtoGold",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": {
											"value": "@item().StoredProcedureName",
											"type": "Expression"
										}
									},
									"linkedServiceName": {
										"referenceName": "ls_synapsesql_poc",
										"type": "LinkedServiceReference",
										"parameters": {
											"databaseName": {
												"value": "@activity('LookupforServerDetails').output.firstRow.DatabaseName",
												"type": "Expression"
											},
											"serverName": {
												"value": "@activity('LookupforServerDetails').output.firstRow.ServerName",
												"type": "Expression"
											},
											"userName": {
												"value": "@activity('LookupforServerDetails').output.firstRow.UserName",
												"type": "Expression"
											},
											"password": {
												"value": "@activity('LookupforServerDetails').output.firstRow.Password",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/ds_ba_poc_adlsgen2_json')]",
				"[concat(variables('workspaceId'), '/datasets/ds_ba_poc_adls_delimit')]",
				"[concat(variables('workspaceId'), '/linkedServices/ls_synapsesql_poc')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Pipeline 1')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "Lookup1",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "JsonSource",
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": true,
									"modifiedDatetimeStart": "2022-12-29T00:00:00.129Z",
									"modifiedDatetimeEnd": "2022-12-29T00:00:00.066Z",
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "JsonReadSettings"
								}
							},
							"dataset": {
								"referenceName": "ds_ba_poc_adlsgen2_json",
								"type": "DatasetReference",
								"parameters": {
									"dsparamFileName": "EmailAlertsConfig.json",
									"dsparamContainerName": "poc",
									"dsparamDirectoryName": "configfiles"
								}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "Filter1",
						"type": "Filter",
						"dependsOn": [
							{
								"activity": "Lookup1",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Lookup1').output.value",
								"type": "Expression"
							},
							"condition": {
								"value": "@equals(item().AlertType,'Success')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Set variable1",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Filter1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "Result",
							"value": {
								"value": "@activity('Filter1').output.Value[0].ReceiverEmailID\n",
								"type": "Expression"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"variables": {
					"Result": {
						"type": "String"
					},
					"del": {
						"type": "String"
					},
					"nn": {
						"type": "String"
					}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/ds_ba_poc_adlsgen2_json')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Pipeline 2')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "Set variable1",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Execute Pipeline1",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "nn",
							"value": {
								"value": "@activity('Execute Pipeline1').output.status",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Execute Pipeline1",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "SendEmailAlerts",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"variables": {
					"nn": {
						"type": "String"
					}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/pipelines/SendEmailAlerts')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/SendAlertsOnDataLoss')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "Get OldRowCount",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"dataset": {
								"referenceName": "ds_ba_poc_adls_delimit",
								"type": "DatasetReference",
								"parameters": {
									"dsparamFileName": "TablewiseRecordCount.csv",
									"dsparamContainerName": "poc",
									"dsparamDirectoryName": "configfiles",
									"dsparamColumDelimitter": ","
								}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "Filter Table",
						"type": "Filter",
						"dependsOn": [
							{
								"activity": "Get OldRowCount",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Get OldRowCount').output.value",
								"type": "Expression"
							},
							"condition": {
								"value": "@equals(concat(item().SchemaName,'.',item().TableName),pipeline().parameters.pipelineParamTableName)",
								"type": "Expression"
							}
						}
					},
					{
						"name": "If Condition1",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "Filter Table",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Get NewRowCount",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@greater(int(activity('Get NewRowCount').output.firstRow.RowsCount),int(activity('Filter Table').output.Value[0].RowsCount))",
								"type": "Expression"
							},
							"ifFalseActivities": [
								{
									"name": "Send Email Alerts",
									"type": "WebActivity",
									"dependsOn": [
										{
											"activity": "FilterSuccess",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"url": "https://prod-22.centralus.logic.azure.com:443/workflows/6d52335dac044abd8dc7e2626402e1bc/triggers/manual/paths/invoke?api-version=2016-10-01&sp=%2Ftriggers%2Fmanual%2Frun&sv=1.0&sig=H1JZcvLfYGqomNUzETqTTVqxODnVXOYQn_QdtdSrj2E",
										"connectVia": {
											"referenceName": "AutoResolveIntegrationRuntime",
											"type": "IntegrationRuntimeReference"
										},
										"method": "POST",
										"headers": {
											"Content-Type": "application/json"
										},
										"body": {
											"value": "{\n    \"Title\":\"@{activity('FilterSuccess').output.Value[0].Subject}\",\n    \"Color\":\"@{activity('FilterSuccess').output.Value[0].AlertColor}\",\n    \"RecieverEmailID\":\"@{activity('FilterSuccess').output.Value[0].RecieverEmailID}\",\n    \"PipelineName\":\"@{pipeline().Pipeline}\",\n    \"SynapseWorkSpaceName\": \"@{pipeline().DataFactory}\",\n    \"PipelineRunID\":\"@{pipeline().RunId}\",\n    \"ExecuctionTime\":\"@{pipeline().TriggerTime}\",\n    \"ErrorMessage\":\"Pipeline Executed Successfully\",\n    \"EmailBody\":\"@{activity('FilterSuccess').output.Value[0].EmailBody}\",\n    \"EmailBodyFooter\":\"@{activity('FilterSuccess').output.Value[0].EmailBodyFooter}\"\n\n}",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Lookup Config File",
									"type": "Lookup",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "JsonSource",
											"storeSettings": {
												"type": "AzureBlobFSReadSettings",
												"recursive": true,
												"modifiedDatetimeStart": "2022-12-29T00:00:00.129Z",
												"modifiedDatetimeEnd": "2022-12-29T00:00:00.066Z",
												"enablePartitionDiscovery": false
											},
											"formatSettings": {
												"type": "JsonReadSettings"
											}
										},
										"dataset": {
											"referenceName": "ds_ba_poc_adlsgen2_json",
											"type": "DatasetReference",
											"parameters": {
												"dsparamFileName": "EmailAlertsConfig.json",
												"dsparamContainerName": "poc",
												"dsparamDirectoryName": "configfiles"
											}
										},
										"firstRowOnly": false
									}
								},
								{
									"name": "FilterSuccess",
									"type": "Filter",
									"dependsOn": [
										{
											"activity": "Lookup Config File",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"items": {
											"value": "@activity('Lookup Config File').output.value",
											"type": "Expression"
										},
										"condition": {
											"value": "@and(equals(item().AlertType,'DataLoss'),equals(item().PipelineName,pipeline().Pipeline))",
											"type": "Expression"
										}
									}
								}
							]
						}
					},
					{
						"name": "Get NewRowCount",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlPoolSource",
								"sqlReaderQuery": {
									"value": "SELECT COUNT(*) as RowsCount\nFROM @{pipeline().parameters.pipelineParamTableName}",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00"
							},
							"dataset": {
								"referenceName": "ds_ba_poc_synsql",
								"type": "DatasetReference",
								"parameters": {
									"SchemaName": "default",
									"TableName": "default"
								}
							},
							"firstRowOnly": true
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"pipelineParamTableName": {
						"type": "string",
						"defaultValue": "production.brands"
					}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/ds_ba_poc_adls_delimit')]",
				"[concat(variables('workspaceId'), '/datasets/ds_ba_poc_synsql')]",
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]",
				"[concat(variables('workspaceId'), '/datasets/ds_ba_poc_adlsgen2_json')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/SendAlertsOnDataLoss_Latestfinal')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "If Condition1",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "Lookup Table Status",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@or(equals(activity('Lookup Table Status').output.firstRow.data_loss_fl,'true'),equals(activity('Lookup Table Status').output.firstRow.huge_data_fl,'true'))\n",
								"type": "Expression"
							},
							"ifTrueActivities": [
								{
									"name": "Send Email Alerts",
									"type": "WebActivity",
									"dependsOn": [
										{
											"activity": "FilterSuccess",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"url": "https://prod-22.centralus.logic.azure.com:443/workflows/6d52335dac044abd8dc7e2626402e1bc/triggers/manual/paths/invoke?api-version=2016-10-01&sp=%2Ftriggers%2Fmanual%2Frun&sv=1.0&sig=H1JZcvLfYGqomNUzETqTTVqxODnVXOYQn_QdtdSrj2E",
										"connectVia": {
											"referenceName": "AutoResolveIntegrationRuntime",
											"type": "IntegrationRuntimeReference"
										},
										"method": "POST",
										"headers": {
											"Content-Type": "application/json"
										},
										"body": {
											"value": "{\n    \"Title\":\"@{activity('FilterSuccess').output.Value[0].Subject}\",\n    \"Color\":\"@{activity('FilterSuccess').output.Value[0].AlertColor}\",\n    \"RecieverEmailID\":\"@{activity('FilterSuccess').output.Value[0].RecieverEmailID}\",\n    \"PipelineName\":\"@{pipeline().Pipeline}\",\n    \"SynapseWorkSpaceName\": \"@{pipeline().DataFactory}\",\n    \"PipelineRunID\":\"@{pipeline().RunId}\",\n    \"ExecuctionTime\":\"@{pipeline().TriggerTime}\",\n    \"ErrorMessage\":\"Pipeline Executed Successfully\",\n    \"EmailBody\":\"@{activity('FilterSuccess').output.Value[0].EmailBody}\",\n    \"EmailBodyFooter\":\"@{activity('FilterSuccess').output.Value[0].EmailBodyFooter}\"\n\n}",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Lookup Config File",
									"type": "Lookup",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "JsonSource",
											"storeSettings": {
												"type": "AzureBlobFSReadSettings",
												"recursive": true,
												"modifiedDatetimeStart": "2022-12-29T00:00:00.129Z",
												"modifiedDatetimeEnd": "2022-12-29T00:00:00.066Z",
												"enablePartitionDiscovery": false
											},
											"formatSettings": {
												"type": "JsonReadSettings"
											}
										},
										"dataset": {
											"referenceName": "ds_ba_poc_adlsgen2_json",
											"type": "DatasetReference",
											"parameters": {
												"dsparamFileName": "EmailAlertsConfig.json",
												"dsparamContainerName": "poc",
												"dsparamDirectoryName": "configfiles"
											}
										},
										"firstRowOnly": false
									}
								},
								{
									"name": "FilterSuccess",
									"type": "Filter",
									"dependsOn": [
										{
											"activity": "Lookup Config File",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"items": {
											"value": "@activity('Lookup Config File').output.value",
											"type": "Expression"
										},
										"condition": {
											"value": "@and(equals(item().AlertType,'DataLoss'),equals(item().PipelineName,pipeline().Pipeline))",
											"type": "Expression"
										}
									}
								}
							]
						}
					},
					{
						"name": "Get NewRowCount",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Lookup for SQL Pool Details",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlPoolSource",
								"sqlReaderQuery": {
									"value": "WITH base\nAS\n(\nSELECT\n GETDATE()                                                             AS  [execution_time]\n , DB_ID()                                                            AS  [database_id]\n, DB_NAME()                                                            AS  [database_name]\n,s.schema_id                                                           AS  [schema_id]\n, s.name                                                               AS  [schema_name]\n,t.object_id                                                            AS  [table_id]\n, t.name                                                               AS   [table_name]\n,t.create_date                                                          AS  [table_created_date]\n, nps.[in_row_data_page_count]\n    + nps.[row_overflow_used_page_count]\n    + nps.[lob_used_page_count]                                        AS  [data_space_page_count]\n, nps.[reserved_page_count]\n - (nps.[reserved_page_count] - nps.[used_page_count])\n - ([in_row_data_page_count]\n         + [row_overflow_used_page_count]+[lob_used_page_count])       AS  [index_space_page_count]\n, nps.[row_count]                                                      AS  [row_count]\nfrom\n    sys.schemas s\nINNER JOIN sys.tables t\n    ON s.[schema_id] = t.[schema_id]\n\nINNER JOIN sys.pdw_table_mappings tm\n    ON t.[object_id] = tm.[object_id]\nINNER JOIN sys.pdw_nodes_tables nt\n    ON tm.[physical_name] = nt.[name]\nINNER JOIN sys.dm_pdw_nodes pn\n    ON  nt.[pdw_node_id] = pn.[pdw_node_id]\nINNER JOIN sys.pdw_distributions di\n    ON  nt.[distribution_id] = di.[distribution_id]\nINNER JOIN sys.dm_pdw_nodes_db_partition_stats nps\n    ON nt.[object_id] = nps.[object_id]\n    AND nt.[pdw_node_id] = nps.[pdw_node_id]\n    AND nt.[distribution_id] = nps.[distribution_id]\nWHERE pn.[type] = 'COMPUTE'\n)\n \nSELECT database_id,database_name,schema_id,schema_name,table_id,table_name,sum(([data_space_page_count]     * 8.0)   ) as DataSpaceinKB,sum(row_count) as RecordsCount\nFROM base\nwhere schema_name='@{pipeline().parameters.pipelineParamSchemaName}'\nand table_name='@{pipeline().parameters.pipelineParamTableName}'\ngroup by database_id,database_name,schema_id,schema_name,table_id,table_name,table_created_date\n\n;",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00"
							},
							"dataset": {
								"referenceName": "ds_ba_poc_synsql",
								"type": "DatasetReference",
								"parameters": {
									"SchemaName": "default",
									"TableName": "default"
								}
							},
							"firstRowOnly": true
						}
					},
					{
						"name": "SP UpdateTableStatusandHistore",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Get NewRowCount",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[dbo].[usp_UpdateTableStatusandHistory]",
							"storedProcedureParameters": {
								"DataLossPercentage": {
									"value": {
										"value": "@pipeline().parameters.pipelineParamDataLossPercentage",
										"type": "Expression"
									},
									"type": "Int32"
								},
								"HugeDataLossPercentage": {
									"value": {
										"value": "@pipeline().parameters.pipelineParamHugeDLPercentage",
										"type": "Expression"
									},
									"type": "Int32"
								},
								"LatestTotalRows": {
									"value": {
										"value": "@activity('Get NewRowCount').output.firstRow.RecordsCount",
										"type": "Expression"
									},
									"type": "Int64"
								},
								"LatestTotalSize": {
									"value": {
										"value": "@activity('Get NewRowCount').output.firstRow.DataSpaceinKB ",
										"type": "Expression"
									},
									"type": "Int64"
								},
								"SchemaName": {
									"value": {
										"value": "@pipeline().parameters.pipelineParamSchemaName",
										"type": "Expression"
									},
									"type": "String"
								},
								"TableName": {
									"value": {
										"value": "@pipeline().parameters.pipelineParamTableName",
										"type": "Expression"
									},
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "ls_synapsesql_poc",
							"type": "LinkedServiceReference",
							"parameters": {
								"databaseName": {
									"value": "@activity('Lookup for SQL Pool Details').output.firstRow.DatabaseName",
									"type": "Expression"
								},
								"serverName": {
									"value": "@activity('Lookup for SQL Pool Details').output.firstRow.ServerName",
									"type": "Expression"
								},
								"userName": {
									"value": "@activity('Lookup for SQL Pool Details').output.firstRow.UserName",
									"type": "Expression"
								},
								"password": {
									"value": "@activity('Lookup for SQL Pool Details').output.firstRow.Password",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Lookup for SQL Pool Details",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "JsonSource",
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "JsonReadSettings"
								}
							},
							"dataset": {
								"referenceName": "ds_ba_poc_adlsgen2_json",
								"type": "DatasetReference",
								"parameters": {
									"dsparamFileName": "SynSQLServerDetails.json.json",
									"dsparamContainerName": "poc",
									"dsparamDirectoryName": "configfiles"
								}
							},
							"firstRowOnly": true
						}
					},
					{
						"name": "Lookup Table Status",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "SP UpdateTableStatusandHistore",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlPoolSource",
								"sqlReaderQuery": {
									"value": "SELECT *\nFROM  [Audit].[Table_Status]\nWHERE SCHEMA_NAME='@{pipeline().parameters.pipelineParamSchemaName}'\nAND tbl_name='@{pipeline().parameters.pipelineParamTableName}'",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00"
							},
							"dataset": {
								"referenceName": "ds_ba_poc_synsql",
								"type": "DatasetReference",
								"parameters": {
									"SchemaName": "default",
									"TableName": "default"
								}
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"pipelineParamTableName": {
						"type": "string",
						"defaultValue": "SalesPerson"
					},
					"pipelineParamSchemaName": {
						"type": "string",
						"defaultValue": "Sales"
					},
					"pipelineParamDataLossPercentage": {
						"type": "string",
						"defaultValue": "20"
					},
					"pipelineParamHugeDLPercentage": {
						"type": "string",
						"defaultValue": "40"
					}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/ds_ba_poc_synsql')]",
				"[concat(variables('workspaceId'), '/linkedServices/ls_synapsesql_poc')]",
				"[concat(variables('workspaceId'), '/datasets/ds_ba_poc_adlsgen2_json')]",
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/SendEmailAlerts')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "Execute Pipeline1",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Lookup Config File",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "CopyfromSalesForcetoRaw_Final",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "Send Email Alert on Success",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "FilterSuccess",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://prod-22.centralus.logic.azure.com:443/workflows/6d52335dac044abd8dc7e2626402e1bc/triggers/manual/paths/invoke?api-version=2016-10-01&sp=%2Ftriggers%2Fmanual%2Frun&sv=1.0&sig=H1JZcvLfYGqomNUzETqTTVqxODnVXOYQn_QdtdSrj2E",
							"connectVia": {
								"referenceName": "AutoResolveIntegrationRuntime",
								"type": "IntegrationRuntimeReference"
							},
							"method": "POST",
							"headers": {
								"Content-Type": "application/json"
							},
							"body": {
								"value": "{\n    \"Title\":\"@{activity('FilterSuccess').output.Value[0].Subject}\",\n    \"Color\":\"@{activity('FilterSuccess').output.Value[0].AlertColor}\",\n    \"RecieverEmailID\":\"@{activity('FilterSuccess').output.Value[0].RecieverEmailID}\",\n    \"PipelineName\":\"@{pipeline().Pipeline}\",\n    \"SynapseWorkSpaceName\": \"@{pipeline().DataFactory}\",\n    \"PipelineRunID\":\"@{pipeline().RunId}\",\n    \"ExecuctionTime\":\"@{pipeline().TriggerTime}\",\n    \"ErrorMessage\":\"Pipeline Executed Successfully\",\n    \"EmailBody\":\"@{activity('FilterSuccess').output.Value[0].EmailBody}\",\n    \"EmailBodyFooter\":\"@{activity('FilterSuccess').output.Value[0].EmailBodyFooter}\"\n\n}",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Lookup Config File",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "JsonSource",
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": true,
									"modifiedDatetimeStart": "2022-12-29T00:00:00.129Z",
									"modifiedDatetimeEnd": "2022-12-29T00:00:00.066Z",
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "JsonReadSettings"
								}
							},
							"dataset": {
								"referenceName": "ds_ba_poc_adlsgen2_json",
								"type": "DatasetReference",
								"parameters": {
									"dsparamFileName": "EmailAlertsConfig.json",
									"dsparamContainerName": "poc",
									"dsparamDirectoryName": "configfiles"
								}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "FilterSuccess",
						"type": "Filter",
						"dependsOn": [
							{
								"activity": "Execute Pipeline1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Lookup Config File').output.value",
								"type": "Expression"
							},
							"condition": {
								"value": "@and(equals(item().AlertType,'Success'),equals(item().PipelineName,pipeline().Pipeline))",
								"type": "Expression"
							}
						}
					},
					{
						"name": "FilterFailure",
						"type": "Filter",
						"dependsOn": [
							{
								"activity": "Execute Pipeline1",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Lookup Config File').output.value",
								"type": "Expression"
							},
							"condition": {
								"value": "@and(equals(item().AlertType,'Failure'),equals(item().PipelineName,pipeline().Pipeline))",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Send Email Alert on Failure",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "FilterFailure",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://prod-22.centralus.logic.azure.com:443/workflows/6d52335dac044abd8dc7e2626402e1bc/triggers/manual/paths/invoke?api-version=2016-10-01&sp=%2Ftriggers%2Fmanual%2Frun&sv=1.0&sig=H1JZcvLfYGqomNUzETqTTVqxODnVXOYQn_QdtdSrj2E",
							"connectVia": {
								"referenceName": "AutoResolveIntegrationRuntime",
								"type": "IntegrationRuntimeReference"
							},
							"method": "POST",
							"headers": {
								"Content-Type": "application/json"
							},
							"body": {
								"value": "{\n    \"Title\":\"@{activity('FilterFailure').output.Value[0].Subject}\",\n    \"Color\":\"@{activity('FilterFailure').output.Value[0].AlertColor}\",\n    \"RecieverEmailID\":\"@{activity('FilterFailure').output.Value[0].RecieverEmailID}\",\n    \"PipelineName\":\"@{pipeline().Pipeline}\",\n    \"SynapseWorkSpaceName\": \"@{pipeline().DataFactory}\",\n    \"PipelineRunID\":\"@{pipeline().RunId}\",\n    \"ExecuctionTime\":\"@{pipeline().TriggerTime}\",\n    \"ErrorMessage\":\"@{activity('Execute Pipeline1').error.Message}\",\n    \"EmailBody\":\"@{activity('FilterFailure').output.Value[0].EmailBody}\",\n    \"EmailBodyFooter\":\"@{activity('FilterFailure').output.Value[0].EmailBodyFooter}\"\n\n}",
								"type": "Expression"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/pipelines/CopyfromSalesForcetoRaw_Final')]",
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]",
				"[concat(variables('workspaceId'), '/datasets/ds_ba_poc_adlsgen2_json')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/SendEmailAlerts_copy1')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "Execute Pipeline1",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Lookup Config File",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "CopyfromSalesForcetoRaw_Final",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "Send Email On Success",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Filter Success Row",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://prod-13.centralus.logic.azure.com:443/workflows/f0dbfe30eae44aeba8cfd32866a55c6d/triggers/manual/paths/invoke?api-version=2016-10-01&sp=%2Ftriggers%2Fmanual%2Frun&sv=1.0&sig=v-dIAay8NWXK0eiyDxJZNoE86eq3GzK1Q1ghL9Xq7zc",
							"connectVia": {
								"referenceName": "AutoResolveIntegrationRuntime",
								"type": "IntegrationRuntimeReference"
							},
							"method": "POST",
							"headers": {
								"Content-Type": "application/json"
							},
							"body": {
								"value": "{\n    \"Title\":\"@{pipeline().parameters.pipelineParamTitleSucess}\",\n    \"Color\":\"@{pipeline().parameters.pipelineParamColorOnSuccess}\",\n    \"RecieverEmailID\":\"@{pipeline().parameters.pipelineParamRecEmail}\",\n    \"PipelineName\":\"@{pipeline().Pipeline}\",\n    \"SynapseWorkSpaceName\": \"@{pipeline().DataFactory}\",\n    \"PipelineRunID\":\"@{pipeline().RunId}\",\n    \"ExecuctionTime\":\"@{pipeline().TriggerTime}\",\n    \"ErrorMessage\":\"Pipeline Executed Successfully\"\n}",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Send Email On Failure",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Execute Pipeline1",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://prod-13.centralus.logic.azure.com:443/workflows/f0dbfe30eae44aeba8cfd32866a55c6d/triggers/manual/paths/invoke?api-version=2016-10-01&sp=%2Ftriggers%2Fmanual%2Frun&sv=1.0&sig=v-dIAay8NWXK0eiyDxJZNoE86eq3GzK1Q1ghL9Xq7zc",
							"connectVia": {
								"referenceName": "AutoResolveIntegrationRuntime",
								"type": "IntegrationRuntimeReference"
							},
							"method": "POST",
							"headers": {
								"Content-Type": "application/json"
							},
							"body": {
								"value": "{\n    \"Title\":\"@{pipeline().parameters.pipelineParamTitleFailure}\",\n    \"Color\":\"@{pipeline().parameters.pipelineParamColorOnFailure}\",\n    \"RecieverEmailID\":\"@{pipeline().parameters.pipelineParamRecEmail}\",\n    \"PipelineName\":\"@{pipeline().Pipeline}\",\n    \"SynapseWorkSpaceName\": \"@{pipeline().DataFactory}\",\n    \"PipelineRunID\":\"@{pipeline().RunId}\",\n    \"ExecuctionTime\":\"@{pipeline().TriggerTime}\",\n    \"ErrorMessage\":\"@{activity('Execute Pipeline1').error.Message}\"\n}",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Lookup Config File",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "JsonSource",
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": true,
									"modifiedDatetimeStart": "2022-12-29T00:00:00.129Z",
									"modifiedDatetimeEnd": "2022-12-29T00:00:00.066Z",
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "JsonReadSettings"
								}
							},
							"dataset": {
								"referenceName": "ds_ba_poc_adlsgen2_json",
								"type": "DatasetReference",
								"parameters": {
									"dsparamFileName": "EmailAlertsConfig.json",
									"dsparamContainerName": "poc",
									"dsparamDirectoryName": "configfiles"
								}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "Filter Success Row",
						"type": "Filter",
						"dependsOn": [
							{
								"activity": "Execute Pipeline1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Lookup Config File').output.value",
								"type": "Expression"
							},
							"condition": {
								"value": "@equals(item().AlertType,'Success')",
								"type": "Expression"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"pipelineParamRecEmail": {
						"type": "string",
						"defaultValue": "nithin.kumar@novigosolutions.com"
					},
					"pipelineParamColorOnSuccess": {
						"type": "string",
						"defaultValue": "green"
					},
					"pipelineParamColorOnFailure": {
						"type": "string",
						"defaultValue": "red"
					},
					"pipelineParamTitleSucess": {
						"type": "string",
						"defaultValue": "Pipeline Executed Successfully"
					},
					"pipelineParamTitleFailure": {
						"type": "string",
						"defaultValue": "Pipeline Execution Failed"
					}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/pipelines/CopyfromSalesForcetoRaw_Final')]",
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]",
				"[concat(variables('workspaceId'), '/datasets/ds_ba_poc_adlsgen2_json')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/ds_ba_poc_adls_delimit')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_adlsgen2_poc",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"dsparamFileName": {
						"type": "string"
					},
					"dsparamContainerName": {
						"type": "string"
					},
					"dsparamDirectoryName": {
						"type": "string"
					},
					"dsparamColumDelimitter": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": {
							"value": "@dataset().dsparamFileName",
							"type": "Expression"
						},
						"folderPath": {
							"value": "@dataset().dsparamDirectoryName",
							"type": "Expression"
						},
						"fileSystem": {
							"value": "@dataset().dsparamContainerName",
							"type": "Expression"
						}
					},
					"columnDelimiter": {
						"value": "@dataset().dsparamColumDelimitter",
						"type": "Expression"
					},
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": ""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/ls_adlsgen2_poc')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/ds_ba_poc_adlsgen2_json')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_adlsgen2_poc",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"dsparamFileName": {
						"type": "string"
					},
					"dsparamContainerName": {
						"type": "string"
					},
					"dsparamDirectoryName": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "Json",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": {
							"value": "@dataset().dsparamFileName",
							"type": "Expression"
						},
						"folderPath": {
							"value": "@dataset().dsparamDirectoryName",
							"type": "Expression"
						},
						"fileSystem": {
							"value": "@dataset().dsparamContainerName",
							"type": "Expression"
						}
					}
				},
				"schema": {}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/ls_adlsgen2_poc')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/ds_ba_poc_synsql')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"parameters": {
					"SchemaName": {
						"type": "string"
					},
					"TableName": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "SqlPoolTable",
				"schema": [],
				"typeProperties": {
					"schema": {
						"value": "@dataset().SchemaName",
						"type": "Expression"
					},
					"table": {
						"value": "@dataset().TableName",
						"type": "Expression"
					}
				},
				"sqlPool": {
					"referenceName": "nithin_poc_sqlpool",
					"type": "SqlPoolReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/sqlPools/nithin_poc_sqlpool')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/AzureDataLakeStorage1')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "AzureBlobFS",
				"typeProperties": {
					"url": "[parameters('AzureDataLakeStorage1_properties_typeProperties_url')]",
					"accountKey": {
						"type": "SecureString",
						"value": "[parameters('AzureDataLakeStorage1_accountKey')]"
					}
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/ls_adlsgen2_poc')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "AzureBlobFS",
				"typeProperties": {
					"url": "[parameters('ls_adlsgen2_poc_properties_typeProperties_url')]",
					"accountKey": {
						"type": "SecureString",
						"value": "[parameters('ls_adlsgen2_poc_accountKey')]"
					}
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/ls_restapi_ba_poc')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"parameters": {
					"BaseURL": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "RestService",
				"typeProperties": {
					"url": "[parameters('ls_restapi_ba_poc_properties_typeProperties_url')]",
					"enableServerCertificateValidation": true,
					"authenticationType": "Anonymous"
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/ls_synapsesql_poc')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"parameters": {
					"databaseName": {
						"type": "string"
					},
					"serverName": {
						"type": "string"
					},
					"userName": {
						"type": "string"
					},
					"password": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "AzureSqlDW",
				"typeProperties": {
					"connectionString": "[parameters('ls_synapsesql_poc_connectionString')]"
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/nithin-synapse-workspace1-WorkspaceDefaultSqlServer')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"parameters": {
					"DBName": {
						"type": "String"
					}
				},
				"annotations": [],
				"type": "AzureSqlDW",
				"typeProperties": {
					"connectionString": "[parameters('nithin-synapse-workspace1-WorkspaceDefaultSqlServer_connectionString')]"
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/nithin-synapse-workspace2-WorkspaceDefaultSqlServer')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"parameters": {
					"DBName": {
						"type": "String"
					}
				},
				"annotations": [],
				"type": "AzureSqlDW",
				"typeProperties": {
					"connectionString": "[parameters('nithin-synapse-workspace2-WorkspaceDefaultSqlServer_connectionString')]"
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/nithin-synapse-workspace2-WorkspaceDefaultStorage')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "AzureBlobFS",
				"typeProperties": {
					"url": "[parameters('nithin-synapse-workspace2-WorkspaceDefaultStorage_properties_typeProperties_url')]"
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Trigger 1')]",
			"type": "Microsoft.Synapse/workspaces/triggers",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"runtimeState": "Started",
				"pipelines": [
					{
						"pipelineReference": {
							"referenceName": "AutoPuaseDedicatedSQLPool",
							"type": "PipelineReference"
						},
						"parameters": {
							"ResourceGroup": "[parameters('Trigger 1_properties_AutoPuaseDedicatedSQLPool_parameters_ResourceGroup')]",
							"SubscriptionID": "[parameters('Trigger 1_properties_AutoPuaseDedicatedSQLPool_parameters_SubscriptionID')]",
							"WorkspaceName": "[parameters('Trigger 1_properties_AutoPuaseDedicatedSQLPool_parameters_WorkspaceName')]"
						}
					}
				],
				"type": "ScheduleTrigger",
				"typeProperties": {
					"recurrence": {
						"frequency": "Week",
						"interval": 1,
						"startTime": "2023-01-12T05:42:00",
						"timeZone": "India Standard Time",
						"schedule": {
							"minutes": [
								0
							],
							"hours": [
								0,
								9,
								12,
								17,
								20
							],
							"weekDays": [
								"Saturday",
								"Sunday"
							]
						}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/pipelines/AutoPuaseDedicatedSQLPool')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Trigger 2')]",
			"type": "Microsoft.Synapse/workspaces/triggers",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"runtimeState": "Started",
				"pipelines": [
					{
						"pipelineReference": {
							"referenceName": "AutoPuaseDedicatedSQLPool",
							"type": "PipelineReference"
						},
						"parameters": {
							"ResourceGroup": "[parameters('Trigger 2_properties_AutoPuaseDedicatedSQLPool_parameters_ResourceGroup')]",
							"SubscriptionID": "[parameters('Trigger 2_properties_AutoPuaseDedicatedSQLPool_parameters_SubscriptionID')]",
							"WorkspaceName": "[parameters('Trigger 2_properties_AutoPuaseDedicatedSQLPool_parameters_WorkspaceName')]"
						}
					}
				],
				"type": "ScheduleTrigger",
				"typeProperties": {
					"recurrence": {
						"frequency": "Hour",
						"interval": 1,
						"startTime": "2023-01-11T00:00:00",
						"timeZone": "India Standard Time"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/pipelines/AutoPuaseDedicatedSQLPool')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/AutoResolveIntegrationRuntime')]",
			"type": "Microsoft.Synapse/workspaces/integrationRuntimes",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"type": "Managed",
				"typeProperties": {
					"computeProperties": {
						"location": "AutoResolve",
						"dataFlowProperties": {
							"computeType": "General",
							"coreCount": 8,
							"timeToLive": 0
						}
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/WorkspaceSystemIdentity')]",
			"type": "Microsoft.Synapse/workspaces/credentials",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"type": "ManagedIdentity",
				"typeProperties": {}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/ReadJson')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"content": {
					"query": "\n\n select\n    JSON_VALUE(doc, '$.id') AS id,\n    JSON_VALUE(doc, '$.name') AS name,\n    JSON_VALUE(doc, '$.username') AS username,\n    JSON_VALUE(doc, '$.email') AS email,\n    JSON_VALUE(doc, '$.address.street') AS street,\n    JSON_VALUE(doc, '$.address.suite') AS suite,\n    JSON_VALUE(doc, '$.address.zipcode') AS zipcode,\n    JSON_VALUE(doc,'$.address.geo.lat') as Lat,\n    JSON_VALUE(doc,'$.address.geo.lng') as lng,\n    JSON_VALUE(doc, '$.phone') AS phone,\n    JSON_VALUE(doc, '$.website') AS website,\n    JSON_VALUE(doc, '$.company.name') AS companyname,\n    JSON_VALUE(doc, '$.company.catchPhrase') AS catchPhrase,\n   JSON_VALUE(doc, '$.company.bs') AS bs\nfrom openrowset(\n        BULK 'https://nithindatalakestorage.dfs.core.windows.net/poc/salesforce/jsonfiles/user.json',\n        FORMAT = 'CSV',\n        FIELDQUOTE = '0x0b',\n        FIELDTERMINATOR ='0x0b',\n        ROWTERMINATOR = '0x0A'\n    ) with (doc nvarchar(max)) as rows\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "master",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/SQL script 1')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"content": {
					"query": "\n\nCREATE EXTERNAL TABLE ext.UserDetails(\n           StoredProcedureName nvarchar(100)\n)\nWITH (\n    LOCATION='salesforce/jsonfiles/user.json',\n    DATA_SOURCE=ds_ba_poc_adls,\n    FILE_FORMAT=csvFileformat\n);\n\n\n\n\nCREATE EXTERNAL FILE FORMAT jsonFileformat\nWITH (\n    FORMAT_TYPE = json,\n    FORMAT_OPTIONS (\n      FIELD_TERMINATOR = '0x0b',\n      STRING_DELIMITER = '0x0A',\n          USE_TYPE_DEFAULT = FALSE,\n      ENCODING = 'UTF8' )\n);\n\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "nithin_poc_sqlpool",
						"poolName": "nithin_poc_sqlpool"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/SQL script 10')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"content": {
					"query": " select  JSON_VALUE(doc, '$.schema') AS [schema]\n,JSON_VALUE(doc, '$.payload.LastModifiedDate') AS [LastModifiedDate]\n,JSON_VALUE(doc, '$.payload.ChangeEventHeader.commitNumber') AS [commitNumber]\n,JSON_VALUE(doc, '$.payload.ChangeEventHeader.commitUser') AS [commitUser]\n,JSON_VALUE(doc, '$.payload.ChangeEventHeader.sequenceNumber') AS [sequenceNumber]\n,JSON_VALUE(doc, '$.payload.ChangeEventHeader.entityName') AS [entityName]\n,JSON_VALUE(doc, '$.payload.ChangeEventHeader.changeType') AS [changeType]\n,REPLACE(REPLACE(REPLACE(Table2.VALUE,'\"',''),'[',''),']','') AS  [changedFields]\n,JSON_VALUE(doc, '$.payload.ChangeEventHeader.changeOrigin') AS [changeOrigin]\n,JSON_VALUE(doc, '$.payload.ChangeEventHeader.transactionKey') AS [transactionKey]\n,JSON_VALUE(doc, '$.payload.ChangeEventHeader.commitTimestamp') AS [commitTimestamp]\n--,JSON_VALUE(doc, '$.payload.ChangeEventHeader.recordIds[0]') AS [recordIds]\n--,JSON_VALUE(doc, '$.payload.ChangeEventHeader.recordIds[1]') AS [recordIds]\n--,JSON_VALUE(doc, '$.payload.ChangeEventHeader.recordIds[2]') AS [recordIds]\n--,JSON_QUERY(doc, '$.payload.ChangeEventHeader.recordIds') AS [recordIds]\n,REPLACE(REPLACE(REPLACE(Table1.VALUE,'\"',''),'[',''),']','') AS  [recordIds]\n,JSON_VALUE(doc, '$.event.replayId') AS [replayId]\nfrom openrowset(\n        BULK 'https://nithindatalakestorage.dfs.core.windows.net/poc/salesforce/jsonfiles/cdc_stream_12_21_22__06.json',\n        FORMAT = 'CSV',\n        FIELDQUOTE = '0x0b',\n        FIELDTERMINATOR ='0x0b',\n        ROWTERMINATOR = 'Received:'\n    ) with (doc nvarchar(max)) as rows\n    CROSS APPLY STRING_SPLIT(JSON_QUERY(doc, '$.payload.ChangeEventHeader.recordIds'),',')  as Table1\n    CROSS APPLY STRING_SPLIT(JSON_QUERY(doc, '$.payload.ChangeEventHeader.changedFields'),',')  as Table2",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "Test",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/SQL script 11')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"content": {
					"query": "CREATE TABLE dbo.#TempTable\n    (\n     [doc] varchar(8000) \n    )\nWITH\n    (\n    DISTRIBUTION = ROUND_ROBIN,\n     CLUSTERED COLUMNSTORE INDEX\n     -- HEAP\n    )\nGO\n\nCOPY INTO dbo.#TempTable \n \n\tFROM 'https://nithindatalakestorage.dfs.core.windows.net/poc/salesforce/jsonfiles/cdc_stream_12_21_22__06.json'\n\tWITH (\n      \n\t\tFILE_TYPE = 'CSV'\n\t\t,fieldterminator ='0x0b'\n        ,fieldquote = '0x0b'\n        ,rowterminator = 'Received:'  /* Override This if a Json document and not single object */\n\t\t,CREDENTIAL=(IDENTITY= 'Managed Identity')\n        \n\t)\n\n\nselect * from  dbo.#TempTable\n    \nSELECT  \n JSON_VALUE(doc, '$.schema') AS [schema]\n,JSON_VALUE(doc, '$.payload.LastModifiedDate') AS [LastModifiedDate]\n,JSON_VALUE(doc, '$.payload.ChangeEventHeader.commitNumber') AS [commitNumber]\n,JSON_VALUE(doc, '$.payload.ChangeEventHeader.commitUser') AS [commitUser]\n,JSON_VALUE(doc, '$.payload.ChangeEventHeader.sequenceNumber') AS [sequenceNumber]\n,JSON_VALUE(doc, '$.payload.ChangeEventHeader.entityName') AS [entityName]\n,JSON_VALUE(doc, '$.payload.ChangeEventHeader.changeType') AS [changeType]\n,REPLACE(REPLACE(REPLACE(Table2.VALUE,'\"',''),'[',''),']','') AS  [changedFields]\n,JSON_VALUE(doc, '$.payload.ChangeEventHeader.changeOrigin') AS [changeOrigin]\n,JSON_VALUE(doc, '$.payload.ChangeEventHeader.transactionKey') AS [transactionKey]\n,JSON_VALUE(doc, '$.payload.ChangeEventHeader.commitTimestamp') AS [commitTimestamp]\n,REPLACE(REPLACE(REPLACE(Table1.VALUE,'\"',''),'[',''),']','') AS  [recordIds]\n,JSON_VALUE(doc, '$.event.replayId') AS [replayId]\nFROM dbo.#TempTable\n    CROSS APPLY STRING_SPLIT(JSON_QUERY(doc, '$.payload.ChangeEventHeader.recordIds'),',')  as Table1\n    CROSS APPLY STRING_SPLIT(JSON_QUERY(doc, '$.payload.ChangeEventHeader.changedFields'),',')  as Table2\n ",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "nithin_poc_sqlpool",
						"poolName": "nithin_poc_sqlpool"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/SQL script 12')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"content": {
					"query": "CREATE TABLE dbo.#TempTable\n    (\n     [doc] nvarchar(4000) \n    )\nWITH\n    (\n    DISTRIBUTION = ROUND_ROBIN,\n     CLUSTERED COLUMNSTORE INDEX\n     -- HEAP\n    )\nGO\n\nCOPY INTO dbo.#TempTable ([Value])\n \n\tFROM 'https://nithindatalakestorage.dfs.core.windows.net/poc/salesforce/jsonfiles/cdc_stream_12_21_22__06.json'\n\tWITH (\n      \n\t\tFILE_TYPE = 'CSV'\n\t\t,fieldterminator ='0x0b'\n        ,fieldquote = '0x0b'\n        ,rowterminator = '\\n'  /* Override This if a Json document and not single object */\n\t\t,CREDENTIAL=(IDENTITY= 'Managed Identity')\n        \n\t)\n\n\n    select * from  dbo.#TempTable\n ",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "nithin_poc_sqlpool",
						"poolName": "nithin_poc_sqlpool"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/SQL script 13')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"content": {
					"query": "\n select  *\n\nfrom openrowset(\n        BULK 'https://nithindatalakestorage.dfs.core.windows.net/poc/salesforce/jsonfiles/cdc_stream_12_21_22__06.json',\n        FORMAT = 'CSV',\n        FIELDQUOTE = '0x0b',\n        FIELDTERMINATOR ='0x0b',\n        ROWTERMINATOR = '0x0b'\n    ) with (doc nvarchar(max)) as rows\n ",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "Test",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/SQL script 14')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"content": {
					"query": "select *\nfrom openrowset(\n       BULK 'https://nithindatalakestorage.dfs.core.windows.net/poc/salesforce/jsonfiles/cdc_stream_12_21_22__06.json',\n        FORMAT = 'CSV',\n        FIELDQUOTE = '0x0b',\n        FIELDTERMINATOR ='0x0b',\n        ROWTERMINATOR = '0x0b'\n    ) with (doc nvarchar(max)) as rows\n    cross apply openjson (doc)\n        with (country varchar(100) '$.schema')\n ",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "master",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/SQL script 15')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"content": {
					"query": "DECLARE @jsonVariable NVARCHAR(MAX);\n\nSET @jsonVariable = N'[{\n   \"schema\":\"KMND\",\n   \"payload\":{\n      \"LastModifiedDate\":\"2022-12-22\",\n      \"ChangeEventHeader\":{\n         \"commitNumber\":1234,\n         \"commitUser\":\"AJAY\",\n         \"sequenceNumber\":1,\n         \"entityName\":\"Product\",\n         \"changeType\":\"UPDATE\",\n         \"changedFields\":[\n            \"LastModifiedDate\"\n         ],\n         \"changeOrigin\":\"SQL\",\n         \"transactionKey\":\"ACDF\",\n         \"commitTimestamp\":1671545766000,\n         \"recordIds\":[\n            \"J012\",\n            \"K013\",\n            \"L014\"\n         ]\n      }\n   },\n   \"event\":{\n      \"replayId\":1122\n   }\n},\n{\n   \"schema\":\"KMND\",\n   \"payload\":{\n      \"LastModifiedDate\":\"2022-12-27\",\n      \"ChangeEventHeader\":{\n         \"commitNumber\":942,\n         \"commitUser\":\"AKASH\",\n         \"sequenceNumber\":1,\n         \"entityName\":\"Service\",\n         \"changeType\":\"UPDATE\",\n         \"changedFields\":[\n            \"LastModifiedDate\"\n         ],\n         \"changeOrigin\":\"SQL\",\n         \"transactionKey\":\"MMNG\",\n         \"commitTimestamp\":1671546620000,\n         \"recordIds\":[\n            \"M016\",\n            \"N017\",\n            \"O133\",\n            \"P12344\"\n         ]\n      }\n   },\n   \"event\":{\n      \"replayId\":1123\n   }\n\n}\n,\n{\n   \"schema\":\"KMND\",\n   \"payload\":{\n      \"LastModifiedDate\":\"2022-12-22\",\n      \"ChangeEventHeader\":{\n         \"commitNumber\":943,\n         \"commitUser\":\"AKASH\",\n         \"sequenceNumber\":1,\n         \"entityName\":\"Service\",\n         \"changeType\":\"UPDATE\",\n         \"changedFields\":[\n            \"LastModifiedDate\"\n         ],\n         \"changeOrigin\":\"SQL\",\n         \"transactionKey\":\"MMNG\",\n         \"commitTimestamp\":1671546620000,\n         \"recordIds\":[\n            \"M016\",\n            \"N017\",\n            \"O133\",\n            \"P12344\"\n         ]\n      }\n   },\n   \"event\":{\n      \"replayId\":1123\n   }\n\n}]';\n\n-- INSERT INTO <sampleTable>  \nSELECT SalesOrderJsonData.*\nFROM OPENJSON (BULK 'https://nithindatalakestorage.dfs.core.windows.net/poc/salesforce/jsonfiles/cdc_stream_12_21_22__06.json',\n        FORMAT = 'CSV')\n  WITH (\n    Number int N'$.payload.ChangeEventHeader.commitNumber' \n  ) AS SalesOrderJsonData;",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "Test",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/SQL script 16')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"content": {
					"query": "\nIF OBJECT_ID('tempdb..#TempTable') IS  NULL\n BEGIN\n CREATE TABLE #TempTable\n    (\n     [doc] nvarchar(4000) \n    )\nWITH\n    (    DISTRIBUTION = ROUND_ROBIN,\n     CLUSTERED COLUMNSTORE INDEX\n     -- HEAP\n    )\n\nCOPY INTO #TempTable  \n \n\tFROM 'https://nithindatalakestorage.dfs.core.windows.net/poc/salesforce/jsonfiles/user.json'\n\tWITH (\n      \n\t\tFILE_TYPE = 'CSV'\n\t\t,fieldterminator ='0x0b'\n        ,fieldquote = '0x0b'\n        ,rowterminator = '0x0A'   \n\t\t,CREDENTIAL=(IDENTITY= 'Managed Identity')        \n\t)\n  END\n; \n  with SalesForceJsonData_CT \n   as  ( \nSELECT  \n  JSON_VALUE(doc, '$.id') AS id, \n  JSON_VALUE(doc, '$.name') AS name,\n  JSON_VALUE(doc, '$.username') AS username,\n    JSON_VALUE(doc, '$.email') AS email,\n    JSON_VALUE(doc, '$.address.street') AS street,\n    JSON_VALUE(doc, '$.address.suite') AS suite,\n    JSON_VALUE(doc, '$.address.zipcode') AS zipcode,\n    JSON_VALUE(doc,'$.address.geo.lat') as Lat,\n    JSON_VALUE(doc,'$.address.geo.lng') as lng,\n    JSON_VALUE(doc, '$.phone') AS phone,\n    JSON_VALUE(doc, '$.website') AS website,\n    JSON_VALUE(doc, '$.company.name') AS companyname,\n    JSON_VALUE(doc, '$.company.catchPhrase') AS catchPhrase,\n   JSON_VALUE(doc, '$.company.bs') AS bs   \nFROM dbo.#TempTable)\n\nselect * from SalesForceJsonData_CT",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "nithin_poc_sqlpool",
						"poolName": "nithin_poc_sqlpool"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/SQL script 17')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"content": {
					"query": "\nCREATE TABLE dbo.#TempTable\n    (\n     [SchemaName] varchar(100),\n     [TableName] varchar(100),\n     [RecordsCount] BIGINT  )\nWITH\n    (\n    DISTRIBUTION = ROUND_ROBIN,\n     CLUSTERED COLUMNSTORE INDEX\n     -- HEAP\n    )\nGO\n\nCOPY INTO dbo.#TempTable\n(SchemaName,TableName,RecordsCount)\nFROM 'https://nithindatalakestorage.blob.core.windows.net/poc/configfiles/TablewiseRecordCount.csv'\nWITH\n(\n    FILE_TYPE = 'CSV'\n    --,FILE_FORMAT='csvFileformat'\n    ,FIRSTROW = 2\n    ,MAXERRORS = 0\n   , ROWTERMINATOR ='\\n'\n    ,IDENTITY_INSERT = 'OFF'\n) \n \n\n select * from  dbo.#TempTable\n where [SchemaName]+'.'+[TableName]=@\n ",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "nithin_poc_sqlpool",
						"poolName": "nithin_poc_sqlpool"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/SQL script 18')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"content": {
					"query": "\nSELECT sc.name, t.name AS TableName, SUM(p.rows) AS [RowCount] \nFROM sys.tables AS t INNER JOIN sys.partitions AS p ON t.object_id = p.object_id \ninner join sys.schemas sc on t.schema_id=sc.schema_id\nWHERE t.is_ms_shipped = 0 AND p.index_id IN (1, 0) GROUP BY sc.name,t.name\n \n\n\n select count(*)\n from gold.SalesForceJsonData\n ",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "nithin_poc_sqlpool",
						"poolName": "nithin_poc_sqlpool"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/SQL script 19')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"content": {
					"query": "WITH base\nAS\n(\nSELECT\n GETDATE()                                                             AS  [execution_time]\n, DB_NAME()                                                            AS  [database_name]\n, s.name                                                               AS  [schema_name]\n, t.name                                                               AS  [table_name]\n, QUOTENAME(s.name)+'.'+QUOTENAME(t.name)                              AS  [two_part_name]\n, nt.[name]                                                            AS  [node_table_name]\n, ROW_NUMBER() OVER(PARTITION BY nt.[name] ORDER BY (SELECT NULL))     AS  [node_table_name_seq]\n, tp.[distribution_policy_desc]                                        AS  [distribution_policy_name]\n, c.[name]                                                             AS  [distribution_column]\n, nt.[distribution_id]                                                 AS  [distribution_id]\n, i.[type]                                                             AS  [index_type]\n, i.[type_desc]                                                        AS  [index_type_desc]\n, nt.[pdw_node_id]                                                     AS  [pdw_node_id]\n, pn.[type]                                                            AS  [pdw_node_type]\n, pn.[name]                                                            AS  [pdw_node_name]\n, di.name                                                              AS  [dist_name]\n, di.position                                                          AS  [dist_position]\n, nps.[partition_number]                                               AS  [partition_nmbr]\n, nps.[reserved_page_count]                                            AS  [reserved_space_page_count]\n, nps.[reserved_page_count] - nps.[used_page_count]                    AS  [unused_space_page_count]\n, nps.[in_row_data_page_count]\n    + nps.[row_overflow_used_page_count]\n    + nps.[lob_used_page_count]                                        AS  [data_space_page_count]\n, nps.[reserved_page_count]\n - (nps.[reserved_page_count] - nps.[used_page_count])\n - ([in_row_data_page_count]\n         + [row_overflow_used_page_count]+[lob_used_page_count])       AS  [index_space_page_count]\n, nps.[row_count]                                                      AS  [row_count]\nfrom\n    sys.schemas s\nINNER JOIN sys.tables t\n    ON s.[schema_id] = t.[schema_id]\nINNER JOIN sys.indexes i\n    ON  t.[object_id] = i.[object_id]\n    AND i.[index_id] <= 1\nINNER JOIN sys.pdw_table_distribution_properties tp\n    ON t.[object_id] = tp.[object_id]\nINNER JOIN sys.pdw_permanent_table_mappings tm\n    ON t.[object_id] = tm.[object_id]\nINNER JOIN sys.pdw_nodes_tables nt\n    ON tm.[physical_name] = nt.[name]\nINNER JOIN sys.dm_pdw_nodes pn\n    ON  nt.[pdw_node_id] = pn.[pdw_node_id]\nINNER JOIN sys.pdw_distributions di\n    ON  nt.[distribution_id] = di.[distribution_id]\nINNER JOIN sys.dm_pdw_nodes_db_partition_stats nps\n    ON nt.[object_id] = nps.[object_id]\n    AND nt.[pdw_node_id] = nps.[pdw_node_id]\n    AND nt.[distribution_id] = nps.[distribution_id]\nLEFT OUTER JOIN (select * from sys.pdw_column_distribution_properties where distribution_ordinal = 1) cdp\n    ON t.[object_id] = cdp.[object_id]\nLEFT OUTER JOIN sys.columns c\n    ON cdp.[object_id] = c.[object_id]\n    AND cdp.[column_id] = c.[column_id]\nWHERE pn.[type] = 'COMPUTE'\n)\n, size\nAS\n(\nSELECT\n   [execution_time]\n,  [database_name]\n,  [schema_name]\n,  [table_name]\n,  [two_part_name]\n,  [node_table_name]\n,  [node_table_name_seq]\n,  [distribution_policy_name]\n,  [distribution_column]\n,  [distribution_id]\n,  [index_type]\n,  [index_type_desc]\n,  [pdw_node_id]\n,  [pdw_node_type]\n,  [pdw_node_name]\n,  [dist_name]\n,  [dist_position]\n,  [partition_nmbr]\n,  [reserved_space_page_count]\n,  [unused_space_page_count]\n,  [data_space_page_count]\n,  [index_space_page_count]\n,  [row_count]\n,  ([reserved_space_page_count] * 8.0)                                 AS [reserved_space_KB]\n,  ([reserved_space_page_count] * 8.0)/1000                            AS [reserved_space_MB]\n,  ([reserved_space_page_count] * 8.0)/1000000                         AS [reserved_space_GB]\n,  ([reserved_space_page_count] * 8.0)/1000000000                      AS [reserved_space_TB]\n,  ([unused_space_page_count]   * 8.0)                                 AS [unused_space_KB]\n,  ([unused_space_page_count]   * 8.0)/1000                            AS [unused_space_MB]\n,  ([unused_space_page_count]   * 8.0)/1000000                         AS [unused_space_GB]\n,  ([unused_space_page_count]   * 8.0)/1000000000                      AS [unused_space_TB]\n,  ([data_space_page_count]     * 8.0)                                 AS [data_space_KB]\n,  ([data_space_page_count]     * 8.0)/1000                            AS [data_space_MB]\n,  ([data_space_page_count]     * 8.0)/1000000                         AS [data_space_GB]\n,  ([data_space_page_count]     * 8.0)/1000000000                      AS [data_space_TB]\n,  ([index_space_page_count]  * 8.0)                                   AS [index_space_KB]\n,  ([index_space_page_count]  * 8.0)/1000                              AS [index_space_MB]\n,  ([index_space_page_count]  * 8.0)/1000000                           AS [index_space_GB]\n,  ([index_space_page_count]  * 8.0)/1000000000                        AS [index_space_TB]\nFROM base\n)\nSELECT *\nFROM size\n;",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "nithin_poc_sqlpool",
						"poolName": "nithin_poc_sqlpool"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/SQL script 20')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"content": {
					"query": "WITH base\nAS\n(\nSELECT\n DB_ID()                                                           AS  [db_id]\n ,DB_NAME()                                                            AS  [database_name]\n,s.[schema_id]                                                         AS [schema_id]\n, s.name                                                               AS  [schema_name]\n,t.OBJECT_ID                                                            AS  [table_id]\n, t.name                                                               AS  [table_name]\n, nps.[in_row_data_page_count]\n    + nps.[row_overflow_used_page_count]\n    + nps.[lob_used_page_count]                                        AS  [data_space_page_count]\n, Sum(nps.[row_count])                                                     AS  [row_count]\nfrom\n    sys.schemas s\nINNER JOIN sys.tables t\n    ON s.[schema_id] = t.[schema_id]\n\nINNER JOIN sys.pdw_permanent_table_mappings tm\n    ON t.[object_id] = tm.[object_id]\nINNER JOIN sys.pdw_nodes_tables nt\n    ON tm.[physical_name] = nt.[name]\nINNER JOIN sys.dm_pdw_nodes pn\n    ON  nt.[pdw_node_id] = pn.[pdw_node_id]\n\nINNER JOIN sys.dm_pdw_nodes_db_partition_stats nps\n    ON nt.[object_id] = nps.[object_id]\n    AND nt.[pdw_node_id] = nps.[pdw_node_id]\n    AND nt.[distribution_id] = nps.[distribution_id]\n\nWHERE pn.[type] = 'COMPUTE'\ngroup by \ns.[schema_id] \n, s.name     \n, t.name \n,t.OBJECT_ID        \n,nps.[in_row_data_page_count]\n    + nps.[row_overflow_used_page_count]\n    + nps.[lob_used_page_count]\n\n)\n, size\nAS\n(\nSELECT\n  \n [database_name]\n,  [schema_name]\n,  [table_name]\n,  ([data_space_page_count]     * 8.0)                                 AS [data_space_KB]\n\nFROM base\n)\nSELECT *\nFROM size\n;",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "nithin_poc_sqlpool",
						"poolName": "nithin_poc_sqlpool"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/SQL script 22')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"content": {
					"query": "WITH base\nAS\n(\nsELECT\n DB_ID()                                                           AS  [db_id]\n ,DB_NAME()                                                            AS  [database_name]\n,s.[schema_id]                                                         AS [schema_id]\n, s.name                                                               AS  [schema_name]\n,t.OBJECT_ID                                                            AS  [table_id]\n, t.name                                                               AS  [table_name]\n, nps.[in_row_data_page_count]\n    + nps.[row_overflow_used_page_count]\n    + nps.[lob_used_page_count]                                        AS  [data_space_page_count]\n,  sum(nps.[row_count])                                                      AS  [row_count]\nfrom\n    sys.schemas s\nINNER JOIN sys.tables t\n    ON s.[schema_id] = t.[schema_id]\n\nINNER JOIN sys.pdw_permanent_table_mappings tm\n    ON t.[object_id] = tm.[object_id]\nINNER JOIN sys.pdw_nodes_tables nt\n    ON tm.[physical_name] = nt.[name]\nINNER JOIN sys.dm_pdw_nodes pn\n    ON  nt.[pdw_node_id] = pn.[pdw_node_id]\n\nINNER JOIN sys.dm_pdw_nodes_db_partition_stats nps\n    ON nt.[object_id] = nps.[object_id]\n    AND nt.[pdw_node_id] = nps.[pdw_node_id]\n    AND nt.[distribution_id] = nps.[distribution_id]\n\nWHERE pn.[type] = 'COMPUTE'\ngroup by  s.[schema_id] \n, s.name     \n, t.name \n,t.OBJECT_ID        \n,nps.[in_row_data_page_count]\n    + nps.[row_overflow_used_page_count]\n    + nps.[lob_used_page_count]\n, size\nAS\n(\nSELECT\n  \n [database_name]\n,  [schema_name]\n,  [table_name]\n,  ([data_space_page_count]     * 8.0)                                 AS [data_space_KB]\n\nFROM base\n)\nSELECT *\nFROM size\n;\n\n ",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "nithin_poc_sqlpool",
						"poolName": "nithin_poc_sqlpool"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/SQL script 23')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"content": {
					"query": "     \nCREATE TABLE #TableDetails (TableName VARCHAR(100),RecordsCount BIGINT,ReservedSpaceInKB VARCHAR(20),DataSpaceInKB VARCHAR(20),\nIndexSize VARCHAR(20),UnUsedSpave VARCHAR(20))\ninsert into #TableDetails\nEXEC sp_spaceused 'gold.SalesForceJsonData'\n\nSELECT DB_ID() AS DB_ID,DB_NAME()  as DB_Name,b.object_id as Table_ID,TableName, DataSpaceInKB,RecordsCount,b.create_date\n FROM #TableDetails a\n INNER JOIN SYS.TABLES b on B.OBJECT_ID=OBJECT_ID('gold.SalesForceJsonData')\n\n\n\n ",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "nithin_poc_sqlpool",
						"poolName": "nithin_poc_sqlpool"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/SQL script 24')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"content": {
					"query": " WITH base\nAS\n(\nSELECT\n GETDATE()                                                             AS  [execution_time]\n , DB_ID()                                                            AS  [database_id]\n, DB_NAME()                                                            AS  [database_name]\n,s.schema_id                                                           AS  [schema_id]\n, s.name                                                               AS  [schema_name]\n,t.object_id                                                            AS  [table_id]\n, t.name                                                               AS   [table_name]\n,t.create_date                                                          AS  [table_created_date]\n, nps.[in_row_data_page_count]\n    + nps.[row_overflow_used_page_count]\n    + nps.[lob_used_page_count]                                        AS  [data_space_page_count]\n, nps.[reserved_page_count]\n - (nps.[reserved_page_count] - nps.[used_page_count])\n - ([in_row_data_page_count]\n         + [row_overflow_used_page_count]+[lob_used_page_count])       AS  [index_space_page_count]\n, nps.[row_count]                                                      AS  [row_count]\nfrom\n    sys.schemas s\nINNER JOIN sys.tables t\n    ON s.[schema_id] = t.[schema_id]\n\nINNER JOIN sys.pdw_table_mappings tm\n    ON t.[object_id] = tm.[object_id]\nINNER JOIN sys.pdw_nodes_tables nt\n    ON tm.[physical_name] = nt.[name]\nINNER JOIN sys.dm_pdw_nodes pn\n    ON  nt.[pdw_node_id] = pn.[pdw_node_id]\nINNER JOIN sys.pdw_distributions di\n    ON  nt.[distribution_id] = di.[distribution_id]\nINNER JOIN sys.dm_pdw_nodes_db_partition_stats nps\n    ON nt.[object_id] = nps.[object_id]\n    AND nt.[pdw_node_id] = nps.[pdw_node_id]\n    AND nt.[distribution_id] = nps.[distribution_id]\nWHERE pn.[type] = 'COMPUTE'\n)\n \nSELECT database_id,database_name,schema_id,schema_name,table_id,table_name,table_created_date,sum(([data_space_page_count]     * 8.0)   ) as DataSpaceinKB,sum(row_count) as RecrodsCount\nFROM base\ngroup by database_id,database_name,schema_id,schema_name,table_id,table_name,table_created_date\n\n;",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "nithin_poc_sqlpool",
						"poolName": "nithin_poc_sqlpool"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/SQL script 25')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"content": {
					"query": "\nWITH base\nAS\n(\nSELECT\n GETDATE()                                                             AS  [execution_time]\n , DB_ID()                                                            AS  [database_id]\n, DB_NAME()                                                            AS  [database_name]\n,s.schema_id                                                           AS  [schema_id]\n, s.name                                                               AS  [schema_name]\n,t.object_id                                                            AS  [table_id]\n, t.name                                                               AS   [table_name]\n,t.create_date                                                          AS  [table_created_date]\n, nps.[in_row_data_page_count]\n    + nps.[row_overflow_used_page_count]\n    + nps.[lob_used_page_count]                                        AS  [data_space_page_count]\n, nps.[reserved_page_count]\n - (nps.[reserved_page_count] - nps.[used_page_count])\n - ([in_row_data_page_count]\n         + [row_overflow_used_page_count]+[lob_used_page_count])       AS  [index_space_page_count]\n, nps.[row_count]                                                      AS  [row_count]\nfrom\n    sys.schemas s\nINNER JOIN sys.tables t\n    ON s.[schema_id] = t.[schema_id]\n\nINNER JOIN sys.pdw_table_mappings tm\n    ON t.[object_id] = tm.[object_id]\nINNER JOIN sys.pdw_nodes_tables nt\n    ON tm.[physical_name] = nt.[name]\nINNER JOIN sys.dm_pdw_nodes pn\n    ON  nt.[pdw_node_id] = pn.[pdw_node_id]\nINNER JOIN sys.pdw_distributions di\n    ON  nt.[distribution_id] = di.[distribution_id]\nINNER JOIN sys.dm_pdw_nodes_db_partition_stats nps\n    ON nt.[object_id] = nps.[object_id]\n    AND nt.[pdw_node_id] = nps.[pdw_node_id]\n    AND nt.[distribution_id] = nps.[distribution_id]\nWHERE pn.[type] = 'COMPUTE'\n)\n \nSELECT database_id,database_name,schema_id,schema_name,table_id,table_name,sum(([data_space_page_count]     * 8.0)   ) as DataSpaceinKB,sum(row_count) as RecrodsCount\nFROM base\ngroup by database_id,database_name,schema_id,schema_name,table_id,table_name,table_created_date\n\n;\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "nithin_poc_sqlpool",
						"poolName": "nithin_poc_sqlpool"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/SQL script 26')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"content": {
					"query": "select * from [Audit].[Table_Status]\n\nselect * from [Audit].[Table_Stats_History]",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "nithin_poc_sqlpool",
						"poolName": "nithin_poc_sqlpool"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/SQL script 27')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"content": {
					"query": "select * from audit.Table_Stats_History\n\nselect * from audit.Table_Status",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "nithin_poc_sqlpool",
						"poolName": "nithin_poc_sqlpool"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/SQL script 28')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"content": {
					"query": "ALTER PROCEDURE dbo.usp_UpdateTableStatusandHistory   \n    @SchemaName nvarchar(50),   \n    @TableName nvarchar(50)  ,\n    @DataLossPercentage int,\n    @HugeDataLossPercentage int,\n    @LatestTotalSize BIGINT,\n    @LatestTotalRows BIGINT\nAS   \n \n-----------------------Update History Table------------------------------------- \ninsert into audit.Table_Stats_History(db_id,db_name,schema_id,schema_name,tbl_id,tbl_name,total_size,total_rows,created_date)\nselect   db_id,db_name,schema_id,schema_name,tbl_id,tbl_name,latest_total_size,latest_total_rows,getdate()\nfrom audit.Table_Status\nWHERE SCHEMA_NAME=@SchemaName and tbl_name=@TableName\n \n ;\n\n-----------------------Perform  Merge------------------------------------- \n \n\nWith CTE_Table_Status\nas (\nSELECT top 1 [db_id],[db_name],[schema_id],[schema_name],tbl_id,tbl_name,NULL as max_total_size,NULL as max_total_rows,@LatestTotalSize as latest_total_size, @LatestTotalRows as latest_total_rows,\n(CASE WHEN 100-(ISNULL(cast(@LatestTotalRows as float),0)/isnull(cast(total_rows as float),0)*100)>=@DataLossPercentage then 1 else 0 end ) as DataLossFlag,\n(CASE WHEN 100-(ISNULL(cast(@LatestTotalRows as float),0)/isnull(cast(total_rows as float),0)*100)>=@HugeDataLossPercentage then 1 else 0 end ) HugeDataLossFlag,\nGETDATE() AS updated_Date\nFROM audit.Table_Stats_History A\nWHERE [SCHEMA_NAME]=@SchemaName and tbl_name=@TableName\nAND created_Date=(Select max(created_Date) from audit.Table_Stats_History\nwhere [SCHEMA_NAME]=a.[SCHEMA_NAME] and tbl_name=a.tbl_name)\n\n)\n\n\n MERGE audit.Table_Status AS Target\n    USING CTE_Table_Status\tAS Source\n    ON Source.tbl_id = Target.tbl_id and  Source.[schema_id] = Target.[schema_id]\n    \n    -- For Inserts\n    WHEN NOT MATCHED BY Target THEN\n        INSERT ([db_id],[db_name], [schema_id],[schema_name],tbl_id,tbl_name,max_total_size,max_total_rows,latest_total_size,\n        latest_total_rows,data_loss_fl,huge_data_fl,updated_date) \n        VALUES (Source.[db_id],Source.[db_name], Source.[schema_id],Source.[schema_name],Source.tbl_id,Source.tbl_name,\n        Source.max_total_size,Source.max_total_rows,Source.latest_total_size,\n        Source.latest_total_rows,Source.DataLossFlag,Source.HugeDataLossFlag,Source.updated_date)\n    \n    -- For Updates\n    WHEN MATCHED THEN UPDATE SET\n        Target.max_total_size\t= Source.max_total_size,\n        Target.max_total_rows\t= Source.max_total_rows,\n        Target.latest_total_size= Source.latest_total_size,\n        Target.latest_total_rows= Source.latest_total_rows,\n\t    Target.data_loss_fl= Source.DataLossFlag,\n        Target.huge_data_fl\t\t= Source.HugeDataLossFlag,\n        Target.updated_date\t\t= Source.updated_date\n        ;\n\n\n\nGO  ",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "nithin_poc_sqlpool",
						"poolName": "nithin_poc_sqlpool"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/SQL script 29')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"content": {
					"query": " ",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "nithin_poc_sqlpool",
						"poolName": "nithin_poc_sqlpool"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/SQL script 3')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"content": {
					"query": "--IF NOT EXISTS (SELECT * FROM sys.objects O JOIN sys.schemas S ON O.schema_id = S.schema_id \n--WHERE O.NAME = 'NYCTaxiTripSmall' AND O.TYPE = 'U' AND S.NAME = 'dbo')\n\n\nCREATE TABLE dbo.#NYCTaxiTripSmall\n    (\n     [BusinessEntityID] int\n    )\nWITH\n    (\n    DISTRIBUTION = ROUND_ROBIN,\n     CLUSTERED COLUMNSTORE INDEX\n     -- HEAP\n    )\nGO\n\nCOPY INTO dbo.#NYCTaxiTripSmall\n(BusinessEntityID)\nFROM 'https://nithindatalakestorage.dfs.core.windows.net/poc/test/SalesPerson_CT.csv'\nWITH\n(\n    FILE_TYPE = 'CSV'\n    --,FILE_FORMAT='csvFileformat'\n    ,FIRSTROW = 2\n    ,MAXERRORS = 0\n   , FIELDTERMINATOR ='|'\n   , ROWTERMINATOR ='\\n'\n    ,IDENTITY_INSERT = 'OFF'\n) \n \n\n select * from  dbo.#NYCTaxiTripSmall\n ",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "nithin_poc_sqlpool",
						"poolName": "nithin_poc_sqlpool"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/SQL script 5')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"content": {
					"query": "--IF NOT EXISTS (SELECT * FROM sys.objects O JOIN sys.schemas S ON O.schema_id = S.schema_id \n--WHERE O.NAME = 'NYCTaxiTripSmall' AND O.TYPE = 'U' AND S.NAME = 'dbo')\n\nCREATE TABLE dbo.#TempTable\n    (\n     [doc] nvarchar(4000) \n    )\nWITH\n    (    DISTRIBUTION = ROUND_ROBIN,\n     CLUSTERED COLUMNSTORE INDEX\n     -- HEAP\n    )\nGO\nCOPY INTO dbo.#TempTable  \n \n\tFROM 'https://nithindatalakestorage.dfs.core.windows.net/poc/salesforce/jsonfiles/'\n\tWITH (\n      \n\t\tFILE_TYPE = 'CSV'\n\t\t,fieldterminator ='0x0b'\n        ,fieldquote = '0x0b'\n        ,rowterminator = '0x0A'  /* Override This if a Json document and not single object */\n\t\t,CREDENTIAL=(IDENTITY= 'Managed Identity')        \n\t)\n    ;\n\n    --select * from dbo.#TempTable  \n \n SELECT  \n  JSON_VALUE(doc, '$.id') AS id, \n  JSON_VALUE(doc, '$.name') AS name,\n  JSON_VALUE(doc, '$.username') AS username,\n    JSON_VALUE(doc, '$.email') AS email,\n    JSON_VALUE(doc, '$.address.street') AS street,\n    JSON_VALUE(doc, '$.address.suite') AS suite,\n    JSON_VALUE(doc, '$.address.zipcode') AS zipcode,\n    JSON_VALUE(doc,'$.address.geo.lat') as Lat,\n    JSON_VALUE(doc,'$.address.geo.lng') as lng,\n    JSON_VALUE(doc, '$.phone') AS phone,\n    JSON_VALUE(doc, '$.website') AS website,\n    JSON_VALUE(doc, '$.company.name') AS companyname,\n    JSON_VALUE(doc, '$.company.catchPhrase') AS catchPhrase,\n   JSON_VALUE(doc, '$.company.bs') AS bs   \nFROM dbo.#TempTable ",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "nithin_poc_sqlpool",
						"poolName": "nithin_poc_sqlpool"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/SQL script 6')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"content": {
					"query": " \ncreate  PROC  [SP_MergeSalesforcetoGoldLayer]  \n  as\n\n  Begin\n\n\nCREATE TABLE dbo.#TempTable\n    (\n     [doc] nvarchar(4000) \n    )\nWITH\n    (    DISTRIBUTION = ROUND_ROBIN,\n     CLUSTERED COLUMNSTORE INDEX\n     -- HEAP\n    )\nGO\n;\nCOPY INTO dbo.#TempTable  \n \n\tFROM 'https://nithindatalakestorage.dfs.core.windows.net/poc/salesforce/jsonfiles/'\n\tWITH (\n      \n\t\tFILE_TYPE = 'CSV'\n\t\t,fieldterminator ='0x0b'\n        ,fieldquote = '0x0b'\n        ,rowterminator = '0x0A'  /* Override This if a Json document and not single object */\n\t\t,CREDENTIAL=(IDENTITY= 'Managed Identity')        \n\t)\n    ;\n \n  with SalesForceJsonData_CT \n   as  ( \nSELECT  \n  JSON_VALUE(doc, '$.id') AS id, \n  JSON_VALUE(doc, '$.name') AS name,\n  JSON_VALUE(doc, '$.username') AS username,\n    JSON_VALUE(doc, '$.email') AS email,\n    JSON_VALUE(doc, '$.address.street') AS street,\n    JSON_VALUE(doc, '$.address.suite') AS suite,\n    JSON_VALUE(doc, '$.address.zipcode') AS zipcode,\n    JSON_VALUE(doc,'$.address.geo.lat') as Lat,\n    JSON_VALUE(doc,'$.address.geo.lng') as lng,\n    JSON_VALUE(doc, '$.phone') AS phone,\n    JSON_VALUE(doc, '$.website') AS website,\n    JSON_VALUE(doc, '$.company.name') AS companyname,\n    JSON_VALUE(doc, '$.company.catchPhrase') AS catchPhrase,\n   JSON_VALUE(doc, '$.company.bs') AS bs   \nFROM dbo.#TempTable)\n\n\nMERGE into [gold].[SalesForceJsonData] AS TARGET\nUSING SalesForceJsonData_CT AS id \nON (TARGET.id = SOURCE.BusinessEntityID) \n--When records are matched, update the records if there is any change\nWHEN MATCHED -----AND TARGET.ProductName <> SOURCE.ProductName OR TARGET.Rate <> SOURCE.Rate \nTHEN UPDATE SET\nTARGET.name=SOURCE.name,\nTARGET.username=SOURCE.username,\nTARGET.email=SOURCE.email,\nTARGET.street=SOURCE.street,\nTARGET.suite=SOURCE.suite,\nTARGET.zipcode=SOURCE.zipcode,\nTARGET.Lat=SOURCE.Lat,\nTARGET.lng=SOURCE.lng ,\nTARGET.phone=SOURCE.phone ,\nTARGET.website=SOURCE.website ,\nTARGET.companyname=SOURCE.companyname ,\nTARGET.catchPhrase=SOURCE.catchPhrase ,\nTARGET.bs=SOURCE.bs \n--When no records are matched, insert the incoming records from source table to target table\nWHEN NOT MATCHED BY TARGET \nTHEN INSERT (id,name,username,email,street,suite,zipcode,Lat,lng,phone,website,companyname,catchPhrase,bs) \nVALUES (\nSource.id,\nSource.name,\nSource.username,\nSource.email,\nSource.street,\nSource.suite,\nSource.zipcode,\nSource.Lat,\nSource.lng,\nSource.phone,\nSource.website,\nSource.companyname,\nSource.catchPhrase,\nSource.bs)\n \n/* 3. Performing the DELETE operation */\n \n    /* When no records are matched with SOURCE table\n       Then delete the records from the target table */\n    WHEN NOT MATCHED BY SOURCE\n    THEN DELETE;\n\n\tEND\n ",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "nithin_poc_sqlpool",
						"poolName": "nithin_poc_sqlpool"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/SQL script 7')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"content": {
					"query": " \n\nALTER PROC  [SP_MergeSalesforcetoGoldLayer] \nAS\n\nSET NOCOUNT ON;\n\n \nIF OBJECT_ID('tempdb..#TempTable') IS  NULL\n BEGIN\n CREATE TABLE #TempTable\n    (\n     [doc] nvarchar(4000) \n    )\nWITH\n    (    DISTRIBUTION = ROUND_ROBIN,\n     CLUSTERED COLUMNSTORE INDEX\n     -- HEAP\n    )\n\nCOPY INTO #TempTable  \n \n\tFROM 'https://nithindatalakestorage.dfs.core.windows.net/poc/salesforce/jsonfiles/'\n\tWITH (\n      \n\t\tFILE_TYPE = 'CSV'\n\t\t,fieldterminator ='0x0b'\n        ,fieldquote = '0x0b'\n        ,rowterminator = '0x0A'   \n\t\t,CREDENTIAL=(IDENTITY= 'Managed Identity')        \n\t)\n  END\n; \n  with SalesForceJsonData_CT \n   as  ( \nSELECT  \n  JSON_VALUE(doc, '$.id') AS id, \n  JSON_VALUE(doc, '$.name') AS name,\n  JSON_VALUE(doc, '$.username') AS username,\n    JSON_VALUE(doc, '$.email') AS email,\n    JSON_VALUE(doc, '$.address.street') AS street,\n    JSON_VALUE(doc, '$.address.suite') AS suite,\n    JSON_VALUE(doc, '$.address.zipcode') AS zipcode,\n    JSON_VALUE(doc,'$.address.geo.lat') as Lat,\n    JSON_VALUE(doc,'$.address.geo.lng') as lng,\n    JSON_VALUE(doc, '$.phone') AS phone,\n    JSON_VALUE(doc, '$.website') AS website,\n    JSON_VALUE(doc, '$.company.name') AS companyname,\n    JSON_VALUE(doc, '$.company.catchPhrase') AS catchPhrase,\n   JSON_VALUE(doc, '$.company.bs') AS bs   \nFROM dbo.#TempTable)\n --------------------------------Perform Merge Operation-------------------------------------------------------------------------------------\n \nMERGE [gold].[SalesForceJsonData] AS TARGET\nUSING SalesForceJsonData_CT AS SOURCE \nON (TARGET.id = SOURCE.id) \n--When records are matched, update the records if there is any change\nWHEN MATCHED -----AND TARGET.ProductName <> SOURCE.ProductName OR TARGET.Rate <> SOURCE.Rate \nTHEN UPDATE SET\nTARGET.name=SOURCE.name,\nTARGET.username=SOURCE.username,\nTARGET.email=SOURCE.email,\nTARGET.street=SOURCE.street,\nTARGET.suite=SOURCE.suite,\nTARGET.zipcode=SOURCE.zipcode,\nTARGET.Lat=SOURCE.Lat,\nTARGET.lng=SOURCE.lng ,\nTARGET.phone=SOURCE.phone ,\nTARGET.website=SOURCE.website ,\nTARGET.companyname=SOURCE.companyname ,\nTARGET.catchPhrase=SOURCE.catchPhrase ,\nTARGET.bs=SOURCE.bs \n--When no records are matched, insert the incoming records from source table to target table\nWHEN NOT MATCHED BY TARGET \nTHEN INSERT (id,name,username,email,street,suite,zipcode,Lat,lng,phone,website,companyname,catchPhrase,bs) \nVALUES (\nSource.id,\nSource.name,\nSource.username,\nSource.email,\nSource.street,\nSource.suite,\nSource.zipcode,\nSource.Lat,\nSource.lng,\nSource.phone,\nSource.website,\nSource.companyname,\nSource.catchPhrase,bs)\n\n    WHEN NOT MATCHED BY SOURCE\n    THEN DELETE;\n\n \nGO",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "nithin_poc_sqlpool",
						"poolName": "nithin_poc_sqlpool"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/SQL script 8')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"content": {
					"query": " select * from gold.SalesForceJsonData",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "nithin_poc_sqlpool",
						"poolName": "nithin_poc_sqlpool"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/SQL script 9')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"content": {
					"query": "\n\t--IF NOT EXISTS (SELECT * FROM sys.objects O JOIN sys.schemas S ON O.schema_id = S.schema_id \n--WHERE O.NAME = 'NYCTaxiTripSmall' AND O.TYPE = 'U' AND S.NAME = 'dbo')\n\nCREATE TABLE dbo.#TempTable\n    (\n     [doc] nvarchar(4000) \n    )\nWITH\n    (\n    DISTRIBUTION = ROUND_ROBIN,\n     CLUSTERED COLUMNSTORE INDEX\n     -- HEAP\n    )\nGO\n\nCOPY INTO dbo.#TempTable \n \n\tFROM 'https://nithindatalakestorage.dfs.core.windows.net/poc/salesforce/jsonfiles/'\n\tWITH (\n      \n\t\tFILE_TYPE = 'CSV'\n\t\t,fieldterminator ='0x0b'\n        ,fieldquote = '0x0b'\n        ,rowterminator = '0x0A'  /* Override This if a Json document and not single object */\n\t\t,CREDENTIAL=(IDENTITY= 'Managed Identity')\n        \n\t)\n\n\nselect * from  dbo.#TempTable\n    \nSELECT  \n  JSON_VALUE(doc, '$.id') AS id, \n  JSON_VALUE(doc, '$.name') AS name,\n  JSON_VALUE(doc, '$.username') AS username,\n    JSON_VALUE(doc, '$.email') AS email,\n    JSON_VALUE(doc, '$.address.street') AS street,\n    JSON_VALUE(doc, '$.address.suite') AS suite,\n    JSON_VALUE(doc, '$.address.zipcode') AS zipcode,\n    JSON_VALUE(doc,'$.address.geo.lat') as Lat,\n    JSON_VALUE(doc,'$.address.geo.lng') as lng,\n    JSON_VALUE(doc,'$.address.geo.lng') as lng,\n    JSON_VALUE(doc, '$.phone') AS phone,\n    JSON_VALUE(doc, '$.website') AS website,\n    JSON_VALUE(doc, '$.company.name') AS companyname,\n    JSON_VALUE(doc, '$.company.catchPhrase') AS catchPhrase,\n   JSON_VALUE(doc, '$.company.bs') AS bs\nFROM dbo.#TempTable\n ",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "nithin_poc_sqlpool",
						"poolName": "nithin_poc_sqlpool"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Notebook 1')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"nbformat": 4,
				"nbformat_minor": 2,
				"sessionProperties": {
					"driverMemory": "28g",
					"driverCores": 4,
					"executorMemory": "28g",
					"executorCores": 4,
					"numExecutors": 2,
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "2",
						"spark.dynamicAllocation.maxExecutors": "2",
						"spark.autotune.trackingId": "6b5bb348-2226-4b51-be33-071a9b4363dc"
					}
				},
				"metadata": {
					"saveOutput": true,
					"enableDebugMode": false,
					"kernelspec": {
						"name": "synapse_pyspark",
						"display_name": "python"
					},
					"language_info": {
						"name": "python"
					},
					"sessionKeepAliveTimeout": 30
				},
				"cells": [
					{
						"cell_type": "code",
						"source": [
							""
						],
						"outputs": [],
						"execution_count": null
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/nithin_poc_sqlpool')]",
			"type": "Microsoft.Synapse/workspaces/sqlPools",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"collation": "SQL_Latin1_General_CP1_CI_AS",
				"maxSizeBytes": 263882790666240,
				"annotations": []
			},
			"dependsOn": [],
			"location": "australiaeast"
		},
		{
			"name": "[concat(parameters('workspaceName'), '/ds_ba_poc_restapi_json_copy1')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_restapi_ba_poc",
					"type": "LinkedServiceReference",
					"parameters": {
						"BaseURL": {
							"value": "@dataset().dsparamBaseURL",
							"type": "Expression"
						}
					}
				},
				"parameters": {
					"dsparamBaseURL": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "RestResource",
				"typeProperties": {},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/ls_restapi_ba_poc')]"
			]
		}
	]
}